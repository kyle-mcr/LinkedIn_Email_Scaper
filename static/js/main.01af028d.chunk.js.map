{"version":3,"sources":["components/Popup.jsx","App.js","index.js"],"names":["Popup","useState","generatedEmail","setGeneratedEmail","name","setName","company","setCompany","error","setError","mouseDown","e","currentTarget","style","backgroundColor","mouseUp","button","setTimeout","popupAlert","text","popup","document","createElement","classList","add","textContent","body","appendChild","animate","opacity","removeChild","useEffect","window","chrome","runtime","onMessage","addListener","req","sender","sendResponse","console","log","message","Promise","resolve","setInfo","then","info","options","method","headers","JSON","stringify","fetch","res","json","data","catch","fetchEmail","className","size","cursor","onClick","close","tabs","query","currentWindow","active","activeTab","sendMessage","id","tempInput","display","value","select","execCommand","onMouseDown","onMouseUp","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01af028d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { VscClose } from 'react-icons/vsc';\nimport { BiCopyAlt } from 'react-icons/bi';\nimport { AiOutlineMail } from 'react-icons/ai';\n\nconst Popup = () => {\n  const [generatedEmail, setGeneratedEmail] = useState(),\n    [name, setName] = useState(),\n    [company, setCompany] = useState(),\n    [error, setError] = useState();\n\n  const scrape = () => {\n    window.chrome.tabs.query({ currentWindow: true, active: true }, (tabs) => {\n      let activeTab = tabs[0];\n      window.chrome.tabs.sendMessage(activeTab.id, { \"message\": \"scrape\" });\n    });\n  };\n\n  const setInfo = (name, company) => {\n    return new Promise((resolve) => {\n      setName(name);\n      setCompany(company);\n      console.log('INFO:' + name + ' ' + company)\n      resolve({ name, company });\n    });\n  }\n\n  const fetchEmail = ({ name, company }) => {\n    const options = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        \"name\": name,\n        \"company\": company\n      })\n    }\n    fetch('http://localhost:4000/generate', options)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        if (data && data[0]) {\n          setGeneratedEmail(data[0]);\n        } else {\n          setError(\"We're sorry, we couldn't guess an email for this user.\")\n        }\n      })\n      .catch(({ message }) => {\n        console.log(message);\n        setError(message);\n      })\n  }\n\n  const mouseDown = e => {\n    e.currentTarget.style.backgroundColor = 'lightgrey';\n  }\n\n  const mouseUp = e => {\n    const button = e.currentTarget;\n    setTimeout(() => {\n      button.style.backgroundColor = 'white';\n    }, 100)\n  }\n\n  const copyToClipboard = () => {\n    const tempInput = document.createElement('input');\n    tempInput.style.display = 'hidden';\n    document.body.appendChild(tempInput);\n    tempInput.value = generatedEmail;\n    tempInput.select();\n    document.execCommand('copy');\n    popupAlert('Email copied to clipboard')\n    document.body.removeChild(tempInput);\n  };\n\n  const popupAlert = text => {\n    const popup = document.createElement('div');\n    popup.classList.add('popup');\n    popup.textContent = text;\n    document.body.appendChild(popup);\n    popup.animate([\n      { opacity: 0.2 },\n      { opacity: 1 }\n    ], 400)\n    setTimeout(() => {\n      popup.animate([\n        { opacity: 1 },\n        { opacity: 0.2 }\n      ], 400)\n    }, 2000);\n    setTimeout(() => {\n      document.body.removeChild(popup);\n    }, 2375)\n  }\n\n  useEffect(() => {\n    window.chrome.runtime.onMessage.addListener((req, sender, sendResponse) => {\n      console.log(req);\n      if (req.message === 'info_response') {\n        if (req.error) {\n          setError(req.error);\n        } else {\n          setInfo(req.name, req.company)\n            .then(info => fetchEmail(info))\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <>\n      <div className='header'>\n        <h1>LinkedIn Email Finder</h1>\n        <VscClose \n          size={20} style={{ cursor: 'pointer' }}\n          onClick={() => window.close()} \n        />\n      </div>\n      <div className='main'>\n        <div className='button' onClick={scrape}>Generate Email</div>\n        { error ? (\n          <div className='popup-text error'>{error}</div>\n        ) : name && company && generatedEmail ? (\n          <div className='results-content'>\n            <div className='popup-text'>\n              We predict that&nbsp; \n              <span className='name-text'>{name}</span>\n              's email, who works at&nbsp; \n              <span className='company-text'>{company}</span>\n              , is\n            </div>\n            <div className='email-content'>\n              <h2>{generatedEmail}</h2>\n                <div className='email-buttons'>\n                  <div onClick={copyToClipboard} onMouseDown={mouseDown} onMouseUp={mouseUp} >\n                    <BiCopyAlt size={25} />\n                  </div>\n                  <a href={`mailto:${generatedEmail}`} onMouseDown={mouseDown} onMouseUp={mouseUp}>\n                    <AiOutlineMail size={25} />\n                  </a>\n                </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport default Popup;","import Popup from './components/Popup';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Popup />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}